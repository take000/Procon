# include <Siv3D.hpp> // OpenSiv3D v0.3.2
#include<iostream>
#include<ctime>
#include<vector>


using namespace std;
//フィールドに関する情報//
int x = 20;
int y = 20;
////ポイント//
int point[20][20] = {
 0,1,-1,2,2,0,3,0,0,0,0,0,0,3,0,2,2,-1,1,0,
3,3,2,1,3,-2,3,0,2,1,1,2,0,3,-2,3,1,2,3,3,
3,-2,1,1,2,2,-4,0,3,2,2,3,0,-4,2,2,1,1,-2,3,
2,1,1,2,1,1,1,0,1,-2,-2,1,0,1,1,1,2,1,1,2,
3,3,2,2,1,0,0,2,3,0,0,3,2,0,0,1,2,2,3,3,
0,2,1,0,2,3,3,0,2,0,0,2,0,3,3,2,0,1,2,0,
0,0,-1,3,3,2,2,3,1,2,2,1,3,2,2,3,3,-1,0,0,
2,3,2,0,2,2,0,2,2,2,2,2,2,0,2,2,0,2,3,2,
3,3,1,1,3,1,0,3,0,-1,-1,0,3,0,1,3,1,1,3,3,
2,1,1,1,2,3,1,0,0,0,0,0,0,1,3,2,1,1,1,2,
2,2,1,1,1,3,1,1,3,-2,-2,3,1,1,3,1,1,1,2,2,
0,3,3,0,-4,2,1,-1,3,1,1,3,-1,1,2,-4,0,3,3,0,
1,2,-2,1,2,3,1,2,-1,0,0,-1,2,1,3,2,1,-2,2,1,
2,2,-3,-1,-4,0,-1,1,1,2,2,1,1,-1,0,-4,-1,-3,2,2,
2,-4,3,3,0,3,1,2,0,1,1,0,2,1,3,0,3,3,-4,2,
1,1,3,3,1,3,-1,0,3,3,3,3,0,-1,3,1,3,3,1,1,
3,2,0,3,3,0,1,1,0,1,1,0,1,1,0,3,3,0,2,3,
1,1,2,3,1,1,1,0,-4,0,0,-4,0,1,1,1,3,2,1,1,
3,1,0,-1,1,2,2,0,2,3,3,2,0,2,2,1,-1,0,1,3,
2,2,2,2,2,2,0,3,0,1,1,0,3,0,2,2,2,2,2,2,


};
//フィールドの座標//
int tile[20][20] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,
	0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,
	0,0,0,0,0,6,0,0,0,0,0,0,0,0,5,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,5,0,0,0,0,0,0,0,0,6,0,0,0,0,0,
	0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,
	0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};
int kousin[20][20] = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,
	0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,
	0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
};
//チームID//
int teamID = 5, enemyID = 6;
//領域及び範囲ポイント//
int mytile = 11, enemytile = 12;
int myarea = 13, enemyarea = 14;

void Main()
{
	/*int vy=14, vt=17;*/
	const Font font(25);
	const Font p_font(50);
	const Font sougouf(60);
	//画面の大きさを取得
	const int32 w = Window::Width(), h = Window::Height();
	//画面サイズを指定
	Window::Resize(1280, 720);
	//名前の変更
	Window::SetTitle(U"Procon30_kagawa");

	while (System::Update())
	{
		//更新点滅//
		const double animation = Periodic::Square0_1(1s);
		//点数バー//
		Rect(10, 10, 380, 70).draw(Palette::Dodgerblue);
		Rect(450, 10, 380, 70).draw(Palette::Orange);
		//ポイント表示//
		//味方//
		p_font(mytile,U"+",myarea).draw(Arg::bottomLeft = Vec2(23, 90), Palette::White);
		font(U"総合                　　　　　総合").draw(Arg::bottomLeft = Vec2(250, 78), Palette::White);
		font(U"タイル     領域　　　　　　　　　　　　　　　　　　   タイル     領域").draw(Arg::bottomLeft = Vec2(20, 40), Palette::White);
		sougouf(mytile + myarea).draw(Arg::bottomLeft = Vec2(300, 90), Palette::White);
		//敵//
		sougouf(enemytile + enemyarea).draw(Arg::bottomLeft = Vec2(463, 90), Palette::White);
		p_font(enemytile, U"+", enemyarea).draw(Arg::bottomLeft = Vec2(653, 90), Palette::White);

		for (int i = 0; i < x; i++) {
			for (int j = 0; j < y; j++) {
				// 矩形を描く.最大で20*20最小で10*10
				//タイルが0の場合:白
				if (tile[i][j] == 0)
					Rect(10 + (j * 41), 90 + (i * 31), 40, 30).draw(Palette::White);
				//タイルがチームIDの場合:青
				else if (tile[i][j] == teamID)
					if (kousin[i][j] == teamID) 
						Rect(10 + (j * 41), 90 + (i * 31), 40, 30).draw(Palette::Dodgerblue).draw(AlphaF(animation));
					else
						Rect(10 + (j * 41), 90 + (i * 31), 40, 30).draw(Palette::Dodgerblue);
				//タイルが敵チームIDの場合:オレンジ
				else if (tile[i][j] == enemyID) {
					if(kousin[i][j] == enemyID)
						Rect(10 + (j * 41), 90 + (i * 31), 40, 30).draw(Palette::Orange).draw(AlphaF(animation));
					else
						Rect(10 + (j * 41), 90 + (i * 31), 40, 30).draw(Palette::Orange);

				}
			}
		}
		//フィールドを生成
		for (int i = 0; i < x; i++) {
			for (int j = 0; j < y; j++) {
				font(point[i][j]).draw(Arg::bottomLeft = Vec2(10+ (j * 41), 120 + (i * 31)), Palette::Black);
			}
		}
	}
}
